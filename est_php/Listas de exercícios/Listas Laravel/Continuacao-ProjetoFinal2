# Projeto de Continua√ß√£o: API-FIRST - Evoluindo o SIGA-SA√öDE üåê

**Objetivo:** Transformar a aplica√ß√£o SIGA-SA√öDE em uma arquitetura profissional **API-First**. Isso significa que o n√∫cleo do sistema ser√° uma API RESTful segura e test√°vel, preparando o terreno para ser consumida por qualquer tipo de cliente (um aplicativo mobile, um painel em outra tecnologia, ou um frontend JavaScript moderno).

-----

### ‚úÖ Funcionalidades Essenciais (Agora como Endpoints de API)

O foco muda de "o que o usu√°rio pode fazer na tela" para "quais recursos a API deve fornecer". As funcionalidades s√£o as mesmas, mas agora s√£o oferecidas como "servi√ßos".

#### **Endpoints de Autentica√ß√£o (`/api/auth`)**

  * `POST /login`: Recebe `email` e `senha`, retorna um **token de autentica√ß√£o** se bem-sucedido.
  * `POST /logout`: Invalida o token do usu√°rio logado.

#### **Endpoints de Pacientes (`/api/pacientes`)**

  * `GET /`: Lista todos os pacientes (com pagina√ß√£o).
  * `POST /`: Cria um novo paciente.
  * `GET /{paciente}`: Mostra os detalhes de um paciente espec√≠fico.
  * `PUT/PATCH /{paciente}`: Atualiza os dados de um paciente.
  * `DELETE /{paciente}`: Exclui um paciente.

#### **Endpoints de Consultas (`/api/consultas`)**

  * Funcionalidades de CRUD semelhantes √†s de pacientes, retornando dados em JSON.

#### **Endpoints por Papel (Role)**

  * `GET /api/medico/consultas`: Endpoint especial que retorna apenas as consultas do m√©dico autenticado.
  * `GET /api/admin/usuarios`: Endpoint para o administrador gerenciar os usu√°rios do sistema.

-----

### üõ†Ô∏è Requisitos T√©cnicos e Guia de Implementa√ß√£o

#### **Setup e Autentica√ß√£o via API (Aprofundamento Listas 19, 20)**

1.  **Refatora√ß√£o:** Este projeto **continua** do anterior. Voc√™ n√£o precisa criar um novo.
2.  **Autentica√ß√£o:** A autentica√ß√£o web do Breeze continua existindo, mas agora vamos focar na API. Configure o **Laravel Sanctum** (j√° instalado pelo Breeze) para autentica√ß√£o baseada em tokens.
3.  **L√≥gica de Login:** O controller de login da API n√£o ir√° mais redirecionar. Ele validar√° os dados e, se corretos, criar√° e retornar√° um token para o cliente: `return response()->json(['token' => $token]);`.

#### **Estrutura de Rotas e API Resources (Aprofundamento Listas 12, 20)**

  * **A√ß√£o:** Mova a l√≥gica de `routes/web.php` para `routes/api.php`. As rotas em `web.php` se tornar√£o m√≠nimas (talvez apenas para servir a p√°gina inicial da SPA).
  * **A√ß√£o:** Crie `API Resources` para `User`, `Paciente` e `Consulta`. Use-os em **todos** os controllers para formatar a sa√≠da JSON. Isso garante consist√™ncia e seguran√ßa, controlando quais dados s√£o expostos.
      * `return new PacienteResource($paciente);` // Para um √∫nico item
      * `return PacienteResource::collection($pacientes);` // Para uma cole√ß√£o

#### **Testes Automatizados (Novo Conceito Profissional)**

  * **Objetivo:** Garantir que cada endpoint da API funcione como esperado.
  * **Ferramenta:** Use o **Pest**, que j√° vem configurado no Laravel.
  * **A√ß√£o:** Crie um arquivo de teste: `php artisan make:test Api/PacienteTest`.
  * **Exemplo de Teste (`tests/Feature/Api/PacienteTest.php`):**
    ```php
    test('um usu√°rio n√£o autenticado n√£o pode listar pacientes', function () {
        $this->getJson('/api/pacientes')->assertStatus(401); // Afirma que deu erro de "N√£o Autorizado"
    });

    test('um usu√°rio autenticado pode listar pacientes', function () {
        $user = User::factory()->create(); // Cria um usu√°rio de teste
        Sanctum::actingAs($user); // Simula que este usu√°rio est√° logado via API

        $this->getJson('/api/pacientes')->assertStatus(200); // Afirma que a requisi√ß√£o foi um sucesso
    });
    ```

#### **Jobs e Filas (Novo Conceito Avan√ßado)**

  * **Objetivo:** Executar tarefas lentas em segundo plano para que a resposta da API seja instant√¢nea.
  * **Cen√°rio:** Envio de e-mail de confirma√ß√£o de consulta.
  * **A√ß√£o:**
    1.  Crie um Job: `php artisan make:job EnviarConfirmacaoConsultaJob`.
    2.  Coloque a l√≥gica de envio de e-mail dentro do m√©todo `handle()` do Job.
    3.  Configure o driver de Fila para `database` no `.env` e rode `php artisan queue:table` e `php artisan migrate`.
    4.  No seu `ConsultaController`, no m√©todo `store`, ap√≥s criar a consulta, despache o job: `EnviarConfirmacaoConsultaJob::dispatch($consulta);`.
    5.  O controller retorna a resposta JSON imediatamente, enquanto o job aguarda na fila para ser processado por um "worker" (`php artisan queue:work`).

#### **Frontend (Opcional, mas Recomendado)**

  * A aplica√ß√£o web com Blade que voc√™ construiu se torna agora o primeiro "cliente" da sua API. Voc√™ pode:
    1.  **Refatorar com Inertia.js + Vue/React:** Substituir as views Blade por componentes JavaScript que fazem chamadas internas √† sua API, criando uma SPA sem recarregamento de p√°gina. O Breeze pode te ajudar a iniciar essa estrutura.
    2.  **Manter como est√°:** Deixar a aplica√ß√£o Blade funcional e tratar a API como um produto separado para ser consumido por terceiros (ex: um aplicativo mobile).

-----

### üó∫Ô∏è Passo a Passo Sugerido para a Evolu√ß√£o

1.  **Backup e Branching:** Antes de tudo, crie um novo branch no seu Git para esta nova vers√£o: `git checkout -b feature/api-first`.
2.  **Configurar Sanctum:** Siga a documenta√ß√£o do Laravel para configurar a autentica√ß√£o de API com Sanctum, criando as rotas de login/logout que retornam tokens.
3.  **Refatorar um CRUD:** Comece pelo CRUD de Pacientes. Mova as rotas para `api.php`, proteja-as com `auth:sanctum`, e modifique os m√©todos do `PacienteController` para retornar `PacienteResource` em vez de `view()`.
4.  **Escrever Testes para o CRUD:** Crie os testes para o CRUD de Pacientes. Garanta que todas as opera√ß√µes (listar, criar, ver, atualizar, deletar) est√£o funcionando e protegidas.
5.  **Implementar Jobs:** Escolha uma a√ß√£o (como o agendamento de consulta), crie o Job para o envio de e-mail/notifica√ß√£o e refatore o controller para despachar o Job em vez de executar a tarefa diretamente.
6.  **Repetir:** Aplique o mesmo padr√£o (Refatorar para API -\> Escrever Testes -\> Implementar Jobs) para os outros m√≥dulos (Consultas, Usu√°rios).
7.  **(Opcional) Conectar o Frontend:** Escolha uma abordagem de frontend (Inertia ou SPA separada) e comece a construir a interface que consome sua nova e robusta API.

Este projeto te levar√° do n√≠vel de um desenvolvedor que sabe usar um framework para o de um arquiteto de software que entende como projetar sistemas modernos e desacoplados.
